TODO

 * enable /status and /ping for php-fpm
 * include a Docker compose file for instantiating both Web server and Database server on a new bridge network

 * Docker Hub images automated build that tracks Github tags (stable, latest, v#)

 * add wp-cli to the install
 * add a wordpress user on the container's OS
 * strict file ownership (uploads is only dir writable, all files owned by wordpress user and restricted)

 * make sure it work with IPv6, make appropriate changes
 * make sure it work with Docker overlay networks, make appropriate changes
 * make sure it work behind a proxy server, make appropriate changes (it works behind CloudFlare so far)

 * upgrade to PHP7
 * add APCu
 * add GUI to opcode
 * integrate with NewRelics

 * install Supervisor from OS package
 * install ACME client from OS package
 * review packages installed in Dockerfile, drop the unecessary ones

 * add support for HTTP/2 (wait for nginx 2.0)
 * build a Dockerfile for nginx-custom and with Let's Encrypt and derive this Dockerfile from it
 * use Debian 8 as base for the above base image

 * extend RDBMS in doc and elsewhere relevant with how to deploy to MySQL, Percona, MariaDB and Aurora
 * run an instance of Nginx or HAProxy or Mysql Proxy as db proxy on the container to front connection to database server

 * change the db proxy to find database servers through service discovery (Consul or Etcd)

 * all logs go to syslog
 * integrate with a remote log analyser

 * customise download endpoint for Wordpress package
 * checksum verification of Wordpress package when downloading specific version

 * find an easily configurable way to allow access to xmlrpc.php for staff who can't be tied to one specific IP



